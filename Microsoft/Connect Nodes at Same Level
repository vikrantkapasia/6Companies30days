/* struct Node
{
  int data;
  Node *left,  *right;
  Node *nextRight;  // This has garbage value in input trees
}; */



    //Function to connect nodes at same level.
    class Solution {
  public:
    void connect(Node *root) {
        if(!root) return;
        root->nextRight = NULL;
        Node* leftMostNode = root;
        while(leftMostNode != NULL) {
            Node* nextLeftNode = NULL, *prevNode = NULL, *temp = leftMostNode;
            while(temp != NULL) {
                adjust(temp->left, prevNode, nextLeftNode);
                adjust(temp->right, prevNode, nextLeftNode);
                temp = temp->nextRight;
            }
            if(prevNode) prevNode->nextRight = NULL;
            leftMostNode = nextLeftNode;
        }
    } 
    
    inline void adjust(Node* node, Node* &prevNode, Node* &nextLeftNode) {
        if(!node) return;
        if(!prevNode) {
            prevNode = node;
            nextLeftNode = prevNode;
        }
        else {
            prevNode->nextRight = node;
            prevNode = node;
        }
    }
};




// { Driver Code Starts.


/* Driver program to test size function*/
int main()
{
  int t;
  scanf("%d\n", &t);
  while (t--)
  {
     string s;
     getline(cin, s);
     Node* root = buildTree(s);
        
    Solution obj;
     obj.connect(root);
     printSpecial(root);
     cout<<endl;
     inorder(root);
     cout<<endl;
  }
  return 0;
}
  // } Driver Code Ends
