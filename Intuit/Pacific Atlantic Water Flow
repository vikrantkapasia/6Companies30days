class Solution {
public:
      vector<vector<int>> res;
    vector<vector<bool>> atl,pac;
    void dfs(vector<vector<int>>&heights,vector<vector<bool>> &vis,int i,int j,int n,int m)
    {
        //here vis is for atl and pac boolean array , whichever will be passed that will get updated;
        if(vis[i][j]==true)
            return;
        vis[i][j] = true;
        if(atl[i][j] && pac[i][j])  //if both are true means water can overflow to both the oceans from that node.
            res.push_back({i,j});
        /
        if(i+1<n && heights[i+1][j]>=heights[i][j])
            dfs(heights,vis,i+1,j,n,m);
        if(i-1>=0 && heights[i-1][j]>=heights[i][j])
            dfs(heights,vis,i-1,j,n,m);
        if(j+1<m && heights[i][j+1]>=heights[i][j])
            dfs(heights,vis,i,j+1,n,m);
        if(j-1>=0 && heights[i][j-1]>=heights[i][j])
            dfs(heights,vis,i,j-1,n,m);
    }
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
        int n = heights.size(),m=heights[0].size();
        atl = pac = vector<vector<bool>>(n,vector<bool>(m,false));
        for(int i=0;i<n;i++)
        {
            dfs(heights,pac,i,0,n,m);   // i,0 bcoz we are traversing 0th row from pacific ocean
            dfs(heights,atl,i,m-1,n,m); //same as above just for m-1th row
        }
        for(int i=0;i<m;i++)
        {
            dfs(heights,pac,0,i,n,m);   //traversing the 0,i column now from pacific ocean
            dfs(heights,atl,n-1,i,n,m);  //same for atlantic ocean
        }
        return res;
    }
};
